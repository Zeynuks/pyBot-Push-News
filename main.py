# -*- coding: utf-8 -*-
from random import choice, sample
from telebot import types

from bot import bot, basket
from channels import available_channels_url
from functions.function import *
from keyboards.keyboard import *

@bot.message_handler(commands = ['start'])
def start_handler(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–Ω–∏–∑—É üëá:\
        \n\nüì∞ <b>–õ–µ–Ω—Ç–∞</b> - –ø–æ–∫–∞–∑ –ø—è—Ç–∏ –ª—é–±—ã—Ö —Å—Ç–∞—Ç–µ–π —Å —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º\
        \n\nüîù <b>–ö–∞–Ω–∞–ª—ã</b> - –ø–æ–∫–∞–∑ –ø—è—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º\
        \n\nüçâ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º–∞—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π\
        \n\nüÜï <b>–ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏</b> - –ø–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\
        \n\n‚ù§Ô∏è <b>–ü–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è</b> - –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –≤–∞–º —Å—Ç–∞—Ç–µ–π',
    parse_mode='HTML', reply_markup = keyboard_menu())

@bot.message_handler(content_types = ['text'])
def main_handler(message):
    if message.text == 'üì∞ –õ–µ–Ω—Ç–∞':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup = sub_keyboard_menu())
    elif message.text == 'üîù –ö–∞–Ω–∞–ª—ã':
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ: 0/5')
        channels_url = sample(available_channels_url, 5)
        for i in range(len(channels_url)):
            url = channels_url[i]
            page = requests.get(url)
            channel_parsing(message, page, i, url)
    elif message.text == 'üçâ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏':
        bot.send_message(message.chat.id, 'üçí –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup = category_keyboard())
    elif message.text == '‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è':
        global basket
        if len(basket) == 0:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Å—Ç–∞—Ç–µ–π')
        else:
            bot.send_message(message.chat.id, '‚ù§Ô∏è')
            legendary_potatoes(message, 0, 5, 1)
    else:
        sub_handler(message)

def sub_handler(message):
    if message.text == 'üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö':
        channels_url = sample(available_channels_url, 5)
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ: 0/5')
        article_parsing(message, channels_url)
    elif message.text == 'üÜï –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏':
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ: 0/5')
        for i in 0, 1, 2, 3, 4:
            try:
                def process():
                    url = choice(available_channels_url)
                    page = requests.get(url)
                    soup = BeautifulSoup(page.text, 'lxml')
                    string_1 = soup.find_all('div', class_='tgme_widget_message_wrap js-widget_message_wrap')[-1]
                    string_2 = string_1.find('div', class_='tgme_widget_message js-widget_message')
                    end = string_2.get('data-post')
                    article_linc = 'https://t.me/' + end
                    page = requests.get(article_linc)
                    soup = BeautifulSoup(page.text, 'lxml')
                    parsing_output(message, page, i, url)
                process()
            except AttributeError:
                process()
            except IndexError:
                process()
    elif message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', reply_markup = keyboard_menu())

@bot.callback_query_handler(func = lambda call: True)
def callback_handler(call):
    global basket
    check = call.data.split()
    if check[0] == 'like':
        basket.append(check[1])
        bot.answer_callback_query(callback_query_id=call.id, text='–î–æ–±–∞–≤–ª–µ–Ω–æ')
        keyboard = types.InlineKeyboardMarkup()
        open_book = types.InlineKeyboardButton(text = '–û—Ç–∫—Ä—ã—Ç—å', url = check[1])
        like = types.InlineKeyboardButton(text = '‚ù§Ô∏è', row_width= 3, callback_data = f'liked delete {check[1]}')
        keyboard.add(open_book, like)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)
        #basket = list(set(basket))
    elif check[0] == 'category':
        if check[1] == 'history':
            list_book = ['https://t.me/s/history_0o/']*5
        elif check[1] == 'geography':
            list_book = ['https://t.me/s/National_Geograph1c/']*5
        elif check[1] == 'cracker':
            list_book = ['https://t.me/s/vseapps/']*5
        elif check[1] == 'poll':
            list_book = ['https://t.me/s/TriviaGames/']*5
        bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥–±–æ—Ä')
        article_parsing(call.message, list_book)
    elif check[0] == 'liked':
        liked_page(call, check)

def liked_page(call, check):
    if check[1] == 'element':
        page = requests.get(check[2])
        soup = BeautifulSoup(page.text, 'lxml')
        string_1 = soup.find('head')
        string_2 = string_1.find('meta', property="og:description")
        article_text = string_2.get('content')
        keyboard = types.InlineKeyboardMarkup()
        open_book = types.InlineKeyboardButton(text = '–û—Ç–∫—Ä—ã—Ç—å', url = check[2])
        like = types.InlineKeyboardButton(text = '‚ù§Ô∏è', row_width= 3, callback_data = f'liked delete {check[2]}')
        keyboard.add(open_book, like)
        bot.answer_callback_query(callback_query_id=call.id)
        bot.edit_message_text(chat_id=call.message.chat.id, text=f'{article_text}\n\n<a href="{check[2]}">–ò—Å—Ç–æ—á–Ω–∏–∫</a>',
        parse_mode='HTML',message_id=call.message.message_id, reply_markup= keyboard)
    elif check[1] == 'delete':
        
        basket.remove(check[2])
        bot.answer_callback_query(callback_query_id=call.id, text='–£–¥–∞–ª–µ–Ω–æ üóë')
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup= article_keyboard(check[2]))
    elif check[1] == 'turn':
        bot.answer_callback_query(callback_query_id=call.id)
        if check[2] == 'right':
            maximum = (int(check[2])+1)*5
            minimum = int(check[2])*5
            legendary_potatoes(call.message, minimum, maximum, 0)
        elif check[2] == 'left':
            minimum = (int(check[2])-2)*5
            if minimum < 0:
                minimum = 0
                maximum = 5
            else:
                maximum = (int(check[2])-1)*5
            legendary_potatoes(call.message, minimum, maximum, 0)

bot.infinity_polling()